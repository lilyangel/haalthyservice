<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.haalthy.service.persistence.UserMapper">

	<cache eviction="LRU"
		   type="com.haalthy.service.cache.MybatisRedisCache" flushInterval="8640000"
		   size="1000" readOnly="true" />

  <select id="getUserByUsername" parameterType="string" resultType="User">
    SELECT
		UserID,
		Email,
		CreateDate,
		UpdateDate,
		Displayname,
		Username,
		imageURL,
		Gender,
		IsSmoking,
		Pathological,
		Stage,
		FollowCount,
		CancerType,
		metastasis,
		Age,
		Password,
		geneticMutation,
		deviceToken
    FROM user
    WHERE user.Username = #{username}
  </select>
  
    <select id="getUserByEmail" parameterType="string" resultType="User">
    SELECT
		UserID,
		password,
		Email,
		CreateDate,
		UpdateDate,
		Displayname,
		Username,
		ImageURL,
		Gender,
		IsSmoking,
		Pathological,
		Stage,
		FollowCount,
		CancerType,
		metastasis,
		Age,
		geneticMutation,
		deviceToken
    FROM user
    WHERE user.Email = #{email}
  </select>
  
  
	<insert id="addUser" useGeneratedKeys="true"
    	keyProperty="UserID" keyColumn="UserID" flushCache="true">
  		INSERT INTO user (Username,Displayname,Password,Email, CreateDate, UpdateDate, FollowCount, CancerType, Pathological, Stage, IsSmoking, metastasis, Gender, Age, userType, geneticMutation)
 			 VALUES (#{username},#{displayname},#{password},#{email},#{createDate}, #{updateDate}, #{followCount}, #{cancerType}, #{pathological}, #{stage}, #{isSmoking}, #{metastasis}, #{gender}, #{age}, #{userType}, #{geneticMutation})
	</insert>
	
	<update id="updateUser" parameterType="User" flushCache="true">
    UPDATE user SET
      	EMAIL = #{email},
      	DISPLAYNAME = #{displayname},
		UpdateDate = #{updateDate},
		Gender = #{gender},
		IsSmoking = #{isSmoking},
		Pathological = #{pathological},
		Stage = #{stage},
		CancerType = #{cancerType},
		metastasis = #{metastasis},
		Age = #{age},
		geneticMutation = #{geneticMutation}
    WHERE username = #{username}
  </update>
  
  <insert id = "addUserTags" parameterType="java.util.List" flushCache="true">
  	INSERT INTO userTag(Username, TagID, DateInserted)
  	VALUES
  	<foreach collection="list" item="userTag" index="index" separator=",">
  		(#{userTag.username}, #{userTag.tagID}, #{userTag.dateInserted})
  	</foreach>
  	</insert>
  	<delete id = "deleteUserTags" parameterType = "String" flushCache="true">
		DELETE FROM userTag 
		WHERE  Username= #{username}
	</delete>
	
	<select id = "getTagsByUsername" parameterType = "String" resultType="Tag">
	SELECT
		tag.TagID,
		tag.Name,
		tag.Description,
		tag.typeName
	FROM tag, userTag
	WHERE tag.TagID = userTag.TagID AND userTag.username = #{username}
	</select>
	
	<update id = "addUserFollowCount" parameterType = "String" flushCache="true">
	Update User SET
		FollowCount = FollowCount+1
	WHERE Username = #{username}
	</update>
	
	<update id="deleteUserFollowCount" parameterType = "String" flushCache="true">
	Update user SET
		FollowCount = FollowCount-1
	WHERE Username = #{username}
	</update>
	
	<select id = "selectSuggestUsersByTags" parameterType = "SelectUserByTagRange" resultType="User">
	SELECT
		UserID,
		Email,
		CreateDate,
		UpdateDate,
		Displayname,
		Username,
		Gender,
		IsSmoking,
		Pathological,
		Stage,
		Age,
		FollowCount,
		CancerType,
		geneticMutation,
		deviceToken,
		imageURL
    FROM suggestUserByTags
    WHERE (TagID = #{tagID}) AND (RankID BETWEEN #{beginIndex} AND #{endIndex})
	</select>
	
	<select id = "searchUsers" resultType = "User">
	SELECT
		UserID,
		Email,
		CreateDate,
		UpdateDate,
		Displayname,
		Username,
		ImageURL,
		Gender,
		IsSmoking,
		Pathological,
		Stage,
		FollowCount,
		CancerType,
		metastasis,
		Age,
		Password,
		geneticMutation,
		deviceToken
    FROM user
    WHERE   	
		Displayname LIKE #{keyword}
 	</select>
 	
	<!-- parameterType = "GetSuggestUsersByProfileRequest" --> 
	<select id = "selectSuggestUsersByProfile"  resultType = "User">
	SELECT
		UserID,
		Email,
		CreateDate,
		UpdateDate,
		Displayname,
		Username,
		ImageURL,
		Gender,
		IsSmoking,
		Pathological,
		Stage,
		Age,
		FollowCount,
		CancerType,
		geneticMutation,
		deviceToken
    FROM SuggestUserByProfile
    WHERE (SuggestedUsername = #{username}) AND (RankID BETWEEN #{beginIndex} AND #{endIndex})
	</select>
	
	<update id="resetPassword" parameterType="User" flushCache="true">
    UPDATE user SET
	  PASSWORD = #{password}
    WHERE username = #{username}
  </update>
  
  <update id="resetDeviceToken" parameterType="User">
    UPDATE user SET
	  deviceToken = #{deviceToken}
    WHERE username = #{username}
  </update>
  
  <delete id="deleteFromSuggestUserByProfile" parameterType = "SuggestedUserPair" flushCache="true">
  	DELETE FROM SuggestUserByProfile where SuggestedUsername = #{suggestedUsername} AND username = #{username}
  </delete>
	<!--更新用户头像-->
	<update id="updateUserPhoto"  parameterType="User" flushCache="true">
		update user SET
		imageURL = #{imageURL}
		where username=#{username}
	</update>

	<!--追加用户头像-->
	<update id="appendUserPhoto" parameterType="User" flushCache="true">
		update user SET
		1=1
		where username=#{username}
	</update>
	
	<select id = "getUsersByDisplayname" parameterType="String" resultType="User">
  	SELECT
 		UserID,
 		Displayname,
		Username
	FROM user WHERE (user.Displayname=#{displayname})
 	</select>
</mapper>