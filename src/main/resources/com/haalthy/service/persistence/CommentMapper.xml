<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.haalthy.service.persistence.CommentMapper">

	<cache eviction="LRU"
		   type="com.haalthy.service.cache.MybatisRedisCache" flushInterval="8640000"
		   size="1000" readOnly="true" />
	<select id="getCommentsByPostId" resultType="Comment">
	    SELECT
	    	CommentID,
			PostID,
			InsertUsername,
			body,
			CountBookmarks,
			DateInserted,
			isActive,
			imageURL,
			displayname
	    FROM Comment, user
	    WHERE POSTID = #{id} AND IsActive = 1 AND (Comment.InsertUsername = user.Username)
	    	AND ((CommentID &lt; #{max_id}) OR (CommentID &gt; #{since_id}))
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}    
	  </select>
	  
	<insert id="addComment" useGeneratedKeys="true"
    	keyProperty="commentID" keyColumn = "CommentID" flushCache="true">
  		INSERT into Comment (InsertUserName, body, CountBookmarks,DateInserted, IsActive, PostID, IsPostOwnerRead)
 			 VALUES (#{insertUsername},#{body}, #{countBookmarks},  #{dateInserted}, #{isActive}, #{postID}, 0)
	</insert>
	
	<update id = "inactiveComment" parameterType="Comment" flushCache="true">
		UPDATE Comment SET
			IsActive = "0"
		WHERE CommentID = #{commentID} AND InsertUserName = #{insertUsername}
	</update>
	
	<select id="getUnreadCommentsCount" parameterType="String" resultType="int">
		SELECT Distinct
			COUNT(*)
			FROM Comment
		WHERE Comment.PostID in (select postID from post where insertUserName=#{username}) and IsPostOwnerRead = 0 AND IsActive = 1  order by dateInserted desc;
	</select>
	
	<select id="getCommentsByUsername" resultType="Comment">
		SELECT
 	    	CommentID,
			PostID,
			InsertUsername,
			body,
			CountBookmarks,
			DateInserted,
			isActive,
			imageURL,
			displayname
			FROM Comment, user
		WHERE Comment.PostID in (select postID from post where insertUserName=#{username}) AND IsActive = 1 AND (Comment.InsertUsername = user.Username) 
			AND ((CommentID &lt; #{max_id}) OR (CommentID &gt; #{since_id}))
			order by dateInserted desc
			LIMIT #{beginIndex}, #{count}
	</select>
	
	<update id="markCommentsAsReadByUsername" parameterType="String" flushCache="true">
		UPDATE Comment SET
			IsPostOwnerRead = 1
		WHERE Comment.PostID in (select postID from post where insertUserName=#{username})
	</update>
</mapper>