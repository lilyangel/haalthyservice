<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.haalthy.service.persistence.PostMapper">
 
   <cache eviction="LRU"
		   type="com.haalthy.service.cache.MybatisRedisCache" flushInterval="8640000"
		   size="1000" readOnly="true" />
  	  <select id="getPostById" parameterType="int" resultType="Post">
	    SELECT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			hasImage,
			DateInserted,
			DateUpdated,
			isActive,
			post.imageURL as imageURL,
			displayname,
			highlight,
			clinicReport,
			user.imageURL as portraitURL,
			geneticMutation,
			user.cancerType,
			user.pathological,
			user.age,
			user.gender,
			patientStatusID
	    FROM post, user
	    WHERE POSTID = #{PostID} AND post.InsertUserName = user.username
	  </select>
	  <select id="getPostByStatusId" parameterType="int" resultType="Post">
	    SELECT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			hasImage,
			DateInserted,
			DateUpdated,
			isActive,
			post.imageURL as imageURL,
			displayname,
			highlight,
			clinicReport,
			user.imageURL as portraitURL,
			geneticMutation,
			user.cancerType,
			user.pathological,
			user.age,
			user.gender,
			patientStatusID
	    FROM post, user
	    WHERE POSTID = #{statusId} AND post.InsertUserName = user.username
	  </select>
	  
	<insert id="addPost" useGeneratedKeys="true"
    	keyProperty="postID" keyColumn = "PostID">
  		INSERT into post (InsertUserName, body, Tags, CountComments, CountBookmarks, CountViews, Closed, IsBroadcast, DateInserted,DateUpdated, isActive, Type, HasImage, highlight, clinicReport, treatmentID, patientStatusID)
 			 VALUES (#{insertUsername},#{body},#{tags}, #{countComments}, #{countBookmarks}, #{countViews}, #{closed},#{isBroadcast}, #{dateInserted}, #{dateUpdated}, #{isActive}, #{type}, #{hasImage}, #{highlight}, #{clinicReport}, #{treatmentID}, #{patientStatusID})
	</insert>
	
	<insert id="addMention" parameterType="java.util.List" flushCache="true">
		INSERT INTO userbementionedbypost (Username, PostID, IsUnRead) VALUES
			<foreach collection="list" item="Mention" index="index" separator=",">
			(#{Mention.username}, #{Mention.postID}, #{Mention.isUnRead})
			</foreach>
	</insert>
	
	<insert id="addPostTag" parameterType="java.util.List" flushCache="true">
		INSERT 
		into posttag(PostID, TagID, CreateTime)
			VALUES
			<foreach collection="list" item="postTag" index="index" separator=",">
       			(#{postTag.postID}, #{postTag.tagId}, #{postTag.createTime})
       		</foreach>
	</insert>
	
	<update id = "inactivePost" parameterType = "Post" flushCache="true">
		UPDATE post SET
			isActive = "0"
		WHERE POSTID = #{postID} AND InsertUserName = #{insertUsername}
	</update>
	
	<select id = "getPostsByTags" resultType = "Post">
		SELECT DISTINCT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			post.imageURL as imageURL,
			displayname,
			highlight,
			clinicReport,
			user.imageURL as portraitURL,
			geneticMutation,
			cancerType,
			stage,
			pathological,
			age,
			gender,
			metastasis,
			patientStatusID
	    FROM post, user
	    WHERE ((PostID IN(
	    	SELECT PostID 
	    	FROM posttag
	    	WHERE 
	    		posttag.TagID IN
	      			<foreach item="tag" index="index" collection="tags" open="(" separator="," close=")">
        				#{tag.tagId}
  					</foreach>
	    	)AND (post.InsertUserName = user.Username)) OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username)))
	    	 AND (isActive = 1) AND (IsBroadcast = 1)  
	    	 AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id}))
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getPostsByTagsCount" resultType="int">
		SELECT DISTINCT
			count(*)
	    FROM post, user
	    WHERE ((PostID IN(
	    	SELECT PostID 
	    	FROM posttag
	    	WHERE 
	    		posttag.TagID IN
	      			<foreach item="tag" index="index" collection="tags" open="(" separator="," close=")">
        				#{tag.tagId}
  					</foreach>
	    		
	    	)AND (post.InsertUserName = user.Username))OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username))) 
	    	AND (isActive = 1) AND (IsBroadcast = 1) 
	    	AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id}))
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getFeeds" resultType = "Post">
		SELECT DISTINCT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			user.imageURL as portraitURL,
			post.imageURL as imageURL,
			displayname,
			highlight,
			clinicReport,
			geneticMutation,
			cancerType,
			stage,
			pathological,
			age,
			gender,
			metastasis,
			patientStatusID
	    FROM post, user
	    WHERE post.InsertUserName IN(
	    	SELECT FollowingUser 
	    	FROM Follow
	    	WHERE 
	    		Username = #{username}
	    	)AND (post.InsertUserName = user.Username) AND (DateInserted &gt;= #{begin}) AND (DateInserted &lt;= #{end}) AND (isActive = 1)
	    	ORDER BY DateInserted DESC
	</select>
	
	<select id = "getPosts" resultType = "Post">
		SELECT DISTINCT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			user.imageURL as portraitURL,
			Gender,
			IsSmoking,
			Pathological,
			user.age,
			CancerType,
			Metastasis,
			Stage,
			HasImage,
			displayname,
			highlight,
			clinicReport,
			post.imageURL as imageURL,
			geneticMutation,
			patientStatusID
	FROM post, user
	    WHERE ((((post.InsertUserName IN(
	    	SELECT FollowingUser 
	    	FROM follow
	    	WHERE 
	    		Username = #{username}
	    	))OR(
	    	post.InsertUserName = #{username}
	    	)
	    	OR(
	    	PostID IN(
	    	SELECT PostID 
	    	FROM posttag
	    	WHERE 
	    		posttag.TagID IN
	      			(SELECT TagID FROM usertag WHERE Username = #{username})
	    	)))
	    	AND (post.InsertUserName = user.Username))
	    	OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username)))
	    	AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id})) AND (isActive = 1) 
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getUpdatedPostCount" resultType = "int">
		SELECT DISTINCT
			count(*)
		FROM post, user
	    WHERE ((((post.InsertUserName IN(
	    	SELECT FollowingUser 
	    	FROM Follow
	    	WHERE 
	    		Username = #{username}
	    	))OR(
	    	post.InsertUserName = #{username}
	    	)
	    	OR(
	    	PostID IN(
	    	SELECT PostID 
	    	FROM posttag
	    	WHERE 
	    		posttag.TagID IN
	      			(SELECT TagID FROM usertag WHERE Username = #{username})
	    	)))
	    	AND (post.InsertUserName = user.Username))
	    	OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username)))
	    	AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id})) AND (isActive = 1) 
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	 </select>
	
	<update id = "increasePostCountComment" parameterType="int" flushCache="true">
		UPDATE post SET CountComments = CountComments+1 WHERE PostID = #{postID}
	</update>
	
	<select id = "getPostsByUsername" resultType = "Post">
		SELECT DISTINCT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			highlight,
			clinicReport,
			imageURL,
			hasImage,
			patientStatusID
		FROM post
		WHERE insertUserName = #{username} AND type = 0
		AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id}))
		ORDER BY DateInserted DESC
	    LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getCommentsByUsername" resultType = "COMMENT">
		SELECT
			user.imageURL,
			commentID,
			post.PostID,
			comment.InsertUsername,
			comment.Body,
			comment.CountBookmarks,
			comment.DateInserted,
			post.imageURL as postImageURL,
			post.body as postBody,
			post.type as postType,
			user.displayname,
			post.isBroadcast
		FROM comment, post, user
		WHERE post.InsertUsername = #{username} AND comment.IsActive = 1 AND post.postID = comment.postID  AND comment.InsertUsername = user.username
		AND ((commentID &lt; #{max_id}) AND (commentID &gt; #{since_id}))
		ORDER BY comment.DateInserted DESC
	    LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getAllBroadcast" resultType="POST">
		SELECT DISTINCT
			PostID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			post.imageURL as imageURL,
			displayname,
			highlight,
			clinicReport,
			user.imageURL as portraitURL,
			geneticMutation,
			cancerType,
			stage,
			pathological,
			age,
			gender,
			metastasis,
			patientStatusID
	    FROM post, user
	    WHERE 
	    (((post.InsertUserName = user.Username) AND (IsBroadcast = 1))
	    OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username)))
	    	AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id})) AND (isActive = 1)
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id = "getAllBroadcastCount" resultType="int">
		SELECT DISTINCT
			count(*)
	    FROM post, user
	    WHERE 
	    (((post.InsertUserName = user.Username) AND (IsBroadcast = 1))
	     OR ((user.IsSuperUser = 1) AND (post.InsertUserName = user.Username)))
	    	AND ((postID &lt; #{max_id}) AND (postID &gt; #{since_id})) AND (isActive = 1) 
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	
	<select id="getUnreadMentionedPostCountByUsername" parameterType="String" resultType="int">
		SELECT Count(*) FROM userbementionedbypost
		WHERE Username = #{username} AND IsUnRead = 1
	</select>
	
	<select id="getMentionedPostsByUsername" resultType="POST">
		SELECT DISTINCT
			post.PostID as postID,
			Type,
			InsertUserName,
			body,
			Tags,
			CountComments,
			CountBookmarks,
			CountViews,
			Closed,
			IsBroadcast,
			DateInserted,
			DateUpdated,
			isActive,
			post.imageURL as imageURL,
			user.imageURL as portraitURL,
			displayname,
			patientStatusID
	    FROM post, user, userbementionedbypost
	    WHERE (post.PostID = userbementionedbypost.PostID)
	    	AND (post.InsertUserName = user.Username)
	    	AND (userbementionedbypost.Username = #{username}) AND (isActive = 1) 
	    	AND ((post.postID &lt; #{max_id}) AND (post.postID &gt; #{since_id}))
	    	ORDER BY DateInserted DESC
	    	LIMIT #{beginIndex}, #{count}
	</select>
	  
	<update id="markMentionedPostAsRead" parameterType="String" flushCache="true">
	  	UPDATE userbementionedbypost SET IsUnRead = 0
	  	WHERE Username = #{username}
	</update>

	<!--更新图片-->
	<update id="updatePostImg" parameterType="Post" flushCache="true">
		update post SET
		imageURL = #{imageURL}
		where PostID=#{postID}
	</update>

	<!--追加图片-->
	<update id="appendPostImg" parameterType="Post" flushCache="true">
		update post SET
		imageURL = concat(imageURL, #{imageURL})
		where PostID=#{postID}
	</update>
</mapper>
